
fan controlling project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000021e  00000292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b9  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bf  00000000  00000000  00000d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003bb  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001788  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cf  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b4  00000000  00000000  00001bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001e8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  7a:	0c 94 0d 01 	jmp	0x21a	; 0x21a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <PWM_init>:
void send_a_command(unsigned char command);
void send_a_character(unsigned char character);
void send_a_string(char*string_of_character);
void PWM_init()
{
	TCCR0=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00);
  82:	89 e6       	ldi	r24, 0x69	; 105
  84:	83 bf       	out	0x33, r24	; 51
	DDRB|=(1<<PB3);
  86:	bb 9a       	sbi	0x17, 3	; 23
  88:	08 95       	ret

0000008a <send_a_command>:
		send_a_command(0x80+0);
	}
}
void send_a_command(unsigned char command)
{
	PORTC=command;
  8a:	85 bb       	out	0x15, r24	; 21
	PORTD&=~(1<<registerselection);
  8c:	97 98       	cbi	0x12, 7	; 18
	PORTD|=(1<<enable);
  8e:	95 9a       	sbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	83 ed       	ldi	r24, 0xD3	; 211
  92:	90 e3       	ldi	r25, 0x30	; 48
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <send_a_command+0xa>
  98:	00 c0       	rjmp	.+0      	; 0x9a <send_a_command+0x10>
  9a:	00 00       	nop
	_delay_ms(50);
	PORTD&=~(1<<enable);
  9c:	95 98       	cbi	0x12, 5	; 18
	PORTC=0;
  9e:	15 ba       	out	0x15, r1	; 21
  a0:	08 95       	ret

000000a2 <send_a_character>:
}
void send_a_character(unsigned char character)
{
	PORTC=character;
  a2:	85 bb       	out	0x15, r24	; 21
	PORTD|=(1<<registerselection);
  a4:	97 9a       	sbi	0x12, 7	; 18
	PORTD|=(1<<enable);
  a6:	95 9a       	sbi	0x12, 5	; 18
  a8:	83 ed       	ldi	r24, 0xD3	; 211
  aa:	90 e3       	ldi	r25, 0x30	; 48
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <send_a_character+0xa>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <send_a_character+0x10>
  b2:	00 00       	nop
	_delay_ms(50);
	PORTD&=~(1<<enable);
  b4:	95 98       	cbi	0x12, 5	; 18
	PORTC=0;
  b6:	15 ba       	out	0x15, r1	; 21
  b8:	08 95       	ret

000000ba <send_a_string>:
}
void send_a_string(char*string_of_characters)
{
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	ec 01       	movw	r28, r24
	while(*string_of_characters>0)
  c0:	88 81       	ld	r24, Y
  c2:	88 23       	and	r24, r24
  c4:	31 f0       	breq	.+12     	; 0xd2 <send_a_string+0x18>
  c6:	21 96       	adiw	r28, 0x01	; 1
	{
		send_a_character(*string_of_characters++);
  c8:	0e 94 51 00 	call	0xa2	; 0xa2 <send_a_character>
	PORTD&=~(1<<enable);
	PORTC=0;
}
void send_a_string(char*string_of_characters)
{
	while(*string_of_characters>0)
  cc:	89 91       	ld	r24, Y+
  ce:	81 11       	cpse	r24, r1
  d0:	fb cf       	rjmp	.-10     	; 0xc8 <send_a_string+0xe>
	{
		send_a_character(*string_of_characters++);
	}
}
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <main>:
	TCCR0=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00);
	DDRB|=(1<<PB3);

}
int main(void)
{
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	00 d0       	rcall	.+0      	; 0xde <main+0x6>
  de:	1f 92       	push	r1
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
	
	DDRC=0XFF;
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	84 bb       	out	0x14, r24	; 20
	DDRA=0X00;
  e8:	1a ba       	out	0x1a, r1	; 26
	DDRD=0XFF;
  ea:	81 bb       	out	0x11, r24	; 17
  ec:	83 ed       	ldi	r24, 0xD3	; 211
  ee:	90 e3       	ldi	r25, 0x30	; 48
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x18>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x1e>
  f6:	00 00       	nop
	_delay_ms(50);
	int duty;
	PWM_init();
  f8:	0e 94 41 00 	call	0x82	; 0x82 <PWM_init>
	ADMUX|=(1<<REFS0)|(1<<REFS1);
  fc:	87 b1       	in	r24, 0x07	; 7
  fe:	80 6c       	ori	r24, 0xC0	; 192
 100:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADEN)|(1<<ADATE)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
 102:	86 b1       	in	r24, 0x06	; 6
 104:	87 6a       	ori	r24, 0xA7	; 167
 106:	86 b9       	out	0x06, r24	; 6
	int16_t COUNTA=0;
	char SHOWA[3];
	send_a_command(0x01);
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0e 94 45 00 	call	0x8a	; 0x8a <send_a_command>
	
	send_a_command(0x38);
 10e:	88 e3       	ldi	r24, 0x38	; 56
 110:	0e 94 45 00 	call	0x8a	; 0x8a <send_a_command>
	
	send_a_command(0x0E);
 114:	8e e0       	ldi	r24, 0x0E	; 14
 116:	0e 94 45 00 	call	0x8a	; 0x8a <send_a_command>
	
	ADCSRA|=(1<<ADSC);
 11a:	36 9a       	sbi	0x06, 6	; 6
	while(1)
	{
		COUNTA=ADC/4;
 11c:	04 b1       	in	r16, 0x04	; 4
 11e:	15 b1       	in	r17, 0x05	; 5
 120:	16 95       	lsr	r17
 122:	07 95       	ror	r16
 124:	16 95       	lsr	r17
 126:	07 95       	ror	r16
		if((COUNTA>=255) && (COUNTA<=399))
 128:	c8 01       	movw	r24, r16
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	91 09       	sbc	r25, r1
 12e:	81 39       	cpi	r24, 0x91	; 145
 130:	91 05       	cpc	r25, r1
 132:	60 f4       	brcc	.+24     	; 0x14c <main+0x74>
 134:	84 e6       	ldi	r24, 0x64	; 100
		{
			for( int duty=100;duty<255;duty++)
			{
				OCR0=duty;
 136:	8c bf       	out	0x3c, r24	; 60
 138:	ef ec       	ldi	r30, 0xCF	; 207
 13a:	f7 e0       	ldi	r31, 0x07	; 7
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x64>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x6a>
 142:	00 00       	nop
 144:	8f 5f       	subi	r24, 0xFF	; 255
	while(1)
	{
		COUNTA=ADC/4;
		if((COUNTA>=255) && (COUNTA<=399))
		{
			for( int duty=100;duty<255;duty++)
 146:	8f 3f       	cpi	r24, 0xFF	; 255
 148:	b1 f7       	brne	.-20     	; 0x136 <main+0x5e>
 14a:	11 c0       	rjmp	.+34     	; 0x16e <main+0x96>
			{
				OCR0=duty;
				_delay_ms(8);
			}
		}
		else if((COUNTA>=400) && (COUNTA<=500))
 14c:	c8 01       	movw	r24, r16
 14e:	80 59       	subi	r24, 0x90	; 144
 150:	91 40       	sbci	r25, 0x01	; 1
 152:	85 36       	cpi	r24, 0x65	; 101
 154:	91 05       	cpc	r25, r1
 156:	58 f4       	brcc	.+22     	; 0x16e <main+0x96>
 158:	80 e0       	ldi	r24, 0x00	; 0
		{
			for( int duty=0;duty<255;duty++)
			{
				OCR0=duty;
 15a:	8c bf       	out	0x3c, r24	; 60
 15c:	ef ec       	ldi	r30, 0xCF	; 207
 15e:	f7 e0       	ldi	r31, 0x07	; 7
 160:	31 97       	sbiw	r30, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <main+0x88>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x8e>
 166:	00 00       	nop
 168:	8f 5f       	subi	r24, 0xFF	; 255
				_delay_ms(8);
			}
		}
		else if((COUNTA>=400) && (COUNTA<=500))
		{
			for( int duty=0;duty<255;duty++)
 16a:	8f 3f       	cpi	r24, 0xFF	; 255
 16c:	b1 f7       	brne	.-20     	; 0x15a <main+0x82>
		
		else
		{
			duty=0x00;
		}
		send_a_string("smart bridge");
 16e:	80 e6       	ldi	r24, 0x60	; 96
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 5d 00 	call	0xba	; 0xba <send_a_string>
		send_a_command(0x80+0x40+0);
 176:	80 ec       	ldi	r24, 0xC0	; 192
 178:	0e 94 45 00 	call	0x8a	; 0x8a <send_a_command>
		send_a_string("temp(c)=");
 17c:	8d e6       	ldi	r24, 0x6D	; 109
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 5d 00 	call	0xba	; 0xba <send_a_string>
		send_a_command(0x80+0x40+8);
 184:	88 ec       	ldi	r24, 0xC8	; 200
 186:	0e 94 45 00 	call	0x8a	; 0x8a <send_a_command>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 18a:	4a e0       	ldi	r20, 0x0A	; 10
 18c:	be 01       	movw	r22, r28
 18e:	6f 5f       	subi	r22, 0xFF	; 255
 190:	7f 4f       	sbci	r23, 0xFF	; 255
 192:	c8 01       	movw	r24, r16
 194:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__itoa_ncheck>
		itoa(COUNTA,SHOWA,10);
		send_a_string(SHOWA);
 198:	ce 01       	movw	r24, r28
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	0e 94 5d 00 	call	0xba	; 0xba <send_a_string>
		send_a_string("");
 1a0:	85 e7       	ldi	r24, 0x75	; 117
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 5d 00 	call	0xba	; 0xba <send_a_string>
		send_a_command(0x80+0);
 1a8:	80 e8       	ldi	r24, 0x80	; 128
 1aa:	0e 94 45 00 	call	0x8a	; 0x8a <send_a_command>
	}
 1ae:	b6 cf       	rjmp	.-148    	; 0x11c <main+0x44>

000001b0 <__itoa_ncheck>:
 1b0:	bb 27       	eor	r27, r27
 1b2:	4a 30       	cpi	r20, 0x0A	; 10
 1b4:	31 f4       	brne	.+12     	; 0x1c2 <__itoa_ncheck+0x12>
 1b6:	99 23       	and	r25, r25
 1b8:	22 f4       	brpl	.+8      	; 0x1c2 <__itoa_ncheck+0x12>
 1ba:	bd e2       	ldi	r27, 0x2D	; 45
 1bc:	90 95       	com	r25
 1be:	81 95       	neg	r24
 1c0:	9f 4f       	sbci	r25, 0xFF	; 255
 1c2:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__utoa_common>

000001c6 <__utoa_ncheck>:
 1c6:	bb 27       	eor	r27, r27

000001c8 <__utoa_common>:
 1c8:	fb 01       	movw	r30, r22
 1ca:	55 27       	eor	r21, r21
 1cc:	aa 27       	eor	r26, r26
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	aa 1f       	adc	r26, r26
 1d4:	a4 17       	cp	r26, r20
 1d6:	10 f0       	brcs	.+4      	; 0x1dc <__utoa_common+0x14>
 1d8:	a4 1b       	sub	r26, r20
 1da:	83 95       	inc	r24
 1dc:	50 51       	subi	r21, 0x10	; 16
 1de:	b9 f7       	brne	.-18     	; 0x1ce <__utoa_common+0x6>
 1e0:	a0 5d       	subi	r26, 0xD0	; 208
 1e2:	aa 33       	cpi	r26, 0x3A	; 58
 1e4:	08 f0       	brcs	.+2      	; 0x1e8 <__utoa_common+0x20>
 1e6:	a9 5d       	subi	r26, 0xD9	; 217
 1e8:	a1 93       	st	Z+, r26
 1ea:	00 97       	sbiw	r24, 0x00	; 0
 1ec:	79 f7       	brne	.-34     	; 0x1cc <__utoa_common+0x4>
 1ee:	b1 11       	cpse	r27, r1
 1f0:	b1 93       	st	Z+, r27
 1f2:	11 92       	st	Z+, r1
 1f4:	cb 01       	movw	r24, r22
 1f6:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <strrev>

000001fa <strrev>:
 1fa:	dc 01       	movw	r26, r24
 1fc:	fc 01       	movw	r30, r24
 1fe:	67 2f       	mov	r22, r23
 200:	71 91       	ld	r23, Z+
 202:	77 23       	and	r23, r23
 204:	e1 f7       	brne	.-8      	; 0x1fe <strrev+0x4>
 206:	32 97       	sbiw	r30, 0x02	; 2
 208:	04 c0       	rjmp	.+8      	; 0x212 <strrev+0x18>
 20a:	7c 91       	ld	r23, X
 20c:	6d 93       	st	X+, r22
 20e:	70 83       	st	Z, r23
 210:	62 91       	ld	r22, -Z
 212:	ae 17       	cp	r26, r30
 214:	bf 07       	cpc	r27, r31
 216:	c8 f3       	brcs	.-14     	; 0x20a <strrev+0x10>
 218:	08 95       	ret

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
